<!-- ---
import type { HTMLAttributes } from "astro/types";
import { getTranslations } from "@app/modules/i18n/lib/utils/translationsations";

import { Icon } from "astro-icon/components";

// TODO: Serverless function to synchronize last info on each visit.
type Props = HTMLAttributes<"span">;
const translations = getTranslations(Astro.locals.locale);
const t = translations.userLocation;
---

<script>
  import { getCurrentLocale } from "@app/modules/i18n/lib/locales";
  import tippy from "tippy.js";

  const response = await fetch("https://geolocation.microlink.io");
  const { country, city } = await response.json();

  const currentLocale = getCurrentLocale();
  const translatedCountry = new Intl.DisplayNames([currentLocale], {
    type: "region",
  });

  const countryName = translatedCountry.of(country.alpha2);

  const userLocation = document.querySelector("div#user-location")!;
  const helpButton = document.querySelector("button#location-privacy-tooltip")!;
  const placeholder = document.querySelector("span#location-placeholder")!;

  userLocation.classList.remove("hidden");
  userLocation.classList.add("flex", "animate-in", "duration-300", "fade-in");
  placeholder.textContent = ` ${city.name}, ${countryName} ${country.flag}`;

  // Sets the tooltip for the privacy notice.
  const template = document.getElementById("privacy-notice");
  tippy(helpButton, {
    content: template?.innerHTML,
    theme: "location",
    offset: [0, 16],

    arrow: false,
    allowHTML: true,
    hideOnClick: false,
    maxWidth: 360,
  });

  template?.remove();
</script>

<div
  id="user-location"
  class="hidden gap-4"
>
  <button
    id="location-privacy-tooltip"
    aria-haspopup="true"
    aria-label={t.notice.title}
  >
    <Icon
      name="lucide:circle-help"
      aria-hidden="true"
      width={24}
      height={24}
    />
  </button>

  <p {...Astro.props}>
    <span>{t.lastVisit}</span>
    <span id="location-placeholder"></span>
  </p>
</div>

<div
  id="privacy-notice"
  class="hidden"
  aria-hidden="true"
>
  <span class="block text-base font-bold">
    {t.notice.title}
  </span>

  <p
    class="whitespace-pre-line text-pretty text-sm font-medium text-popover-foreground/85"
  >
    {t.notice.message}
  </p>
</div>

<style is:global>
  .tippy-box[data-theme~="location"] {
    background-color: theme("colors.popover.DEFAULT");
    border: 1px solid theme("colors.border");
    border-radius: theme("borderRadius.lg");
    color: theme("colors.popover.foreground");

    & .tippy-content {
      padding: 1rem;
    }
  }
</style>
 -->
