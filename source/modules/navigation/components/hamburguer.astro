---
import type { HTMLAttributes } from "astro/types";
import { cn } from "@lib/utils/shadcn";

export type Props = HTMLAttributes<"button">;
const { class: clazz, ...props } = Astro.props;
---

<script>
  // Sync the state using the aria-pressed attribute
  const buttons = document.querySelectorAll("button[data-hamburger-button]")!;
  buttons.forEach((button) => {
    button.addEventListener("click", () => {
      const isPressed = button.getAttribute("aria-pressed") === "true";
      button.setAttribute("aria-pressed", `${!isPressed}`);
    });
  });
</script>

<button
  {...props}
  data-hamburger-button
  class={cn(
    "group inline-flex h-10 w-10 p-2 items-center bg-background text-accent-foreground hover:bg-accent justify-center text-center rounded-lg transition",
    clazz,
  )}
  aria-pressed="false"
>
  <span class="sr-only">Menu</span>
  <svg
    class="pointer-events-none h-6 w-6 fill-current"
    viewBox="0 0 16 16"
    xmlns="http://www.w3.org/2000/svg"
  >
    <rect
      class="origin-center transition-all duration-300 group-[[aria-pressed=true]]:rotate-[315deg] group-[[aria-pressed=true]]:[x:0] group-[[aria-pressed=true]]:[y:7]"
      y="2"
      x="7"
      width="9"
      height="2"
      rx="1"
    ></rect>
    <rect
      class="origin-center transition-all duration-300 group-[[aria-pressed=true]]:rotate-45"
      y="7"
      width="16"
      height="2"
      rx="1"
    ></rect>
    <rect
      class="origin-center transition-all duration-300 group-[[aria-pressed=true]]:rotate-[135deg] group-[[aria-pressed=true]]:[x:0] group-[[aria-pressed=true]]:[y:7]"
      y="12"
      width="9"
      height="2"
      rx="1"
    ></rect>
  </svg>
</button>

<style>
  svg > rect:first-of-type,
  svg > rect:last-of-type {
    transition-timing-function: cubic-bezier(0.5, 0.85, 0.25, 1.1);
  }

  svg > rect {
    transition-timing-function: cubic-bezier(0.5, 0.85, 0.25, 1.8);
  }
</style>
