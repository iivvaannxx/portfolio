---
import type { HTMLAttributes } from "astro/types";

import { Link } from "@components/base";
import { getTranslations } from "@modules/i18n";

import { sections } from "../lib/sections";
import { Icon } from "astro-icon/components";
import { cva } from "class-variance-authority";

export type Props = HTMLAttributes<"nav"> & {
  variant?: "header" | "menu";
};

const variants = cva("flex items-center font-medium text-sm", {
  variants: {
    list: {
      header: "gap-8",
      menu: "w-max flex-col gap-6",
    },

    element: {
      header: "inline-flex items-center justify-center gap-x-2",
      menu: "inline-flex items-center justify-center gap-x-4 text-xl",
    },
  },
});

const { variant = "header", ...props } = Astro.props;
const translations = getTranslations(Astro.locals.locale);
const t = translations.sections;
---

<nav {...props}>
  <ul class={variants({ list: variant })}>
    {
      sections.map(({ name, icon }) => {
        const href = `#${t[name].id}`;
        return (
          <li>
            <Link
              {href}
              label={name}
              class={variants({ element: variant })}
              onclick={`window.lenisScrollTo('${href}', event)`}
              data-nav-link
            >
              <Icon
                name={icon}
                is:inline
              />
              <span>{t[name].name}</span>
            </Link>
          </li>
        );
      })
    }
  </ul>
</nav>

<style is:global>
  [data-nav-link] {
    color: theme("colors.muted.foreground / 0.8");
  }

  [data-nav-link].active {
    color: theme("colors.foreground");
  }

  ul:not(:has([data-nav-link].active)) [data-nav-link] {
    color: theme("colors.foreground");
  }
</style>
