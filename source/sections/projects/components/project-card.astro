---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import { Link } from "@components/base";

import { SkillBadge } from "@app/sections/skills";
import type { ProjectStaticData } from "../lib/types";

type Props = Omit<ProjectStaticData, "featured"> & {
  name: string;
  headline: string;
};

const { name, headline, url, relatedSkills, preview, video, repository } =
  Astro.props;
---

<script>
  import tippy from "tippy.js";
  tippy("article[data-project] a[data-tippy-content]", {
    placement: "bottom",
    theme: "link",
    offset: [0, 16],

    animation: "scale",
    inertia: true,
  });
</script>

<article
  data-project={name}
  class="relative mx-2 flex flex-col-reverse items-center xl:grid xl:grid-cols-12 xl:grid-rows-1"
>
  <div
    class="flex flex-col rounded-xl border px-7 py-6 md:px-10 md:py-8 xl:col-start-1 xl:col-end-11 xl:row-start-1 xl:min-h-[450px] *:xl:max-w-xl *:2xl:max-w-2xl"
  >
    <header class="mt-2 py-2 xl:mt-0">
      <div class="inline-flex items-center">
        <h3
          class="inline whitespace-nowrap font-header text-2xl font-semibold text-primary"
        >
          {name}
        </h3>

        <div class="ml-2 inline-flex items-center gap-1">
          {
            repository && (
              <Link
                href={repository}
                label={`GitHub repository for project "${name}"`}
                targetBlank
                class="aspect-square content-center rounded-md p-2 text-xl font-semibold text-foreground/80 transition-colors hover:bg-accent hover:text-accent-foreground"
                withTooltip
                tooltipContent="Source Code"
              >
                <Icon
                  class="size-6"
                  name="lucide:github"
                />
              </Link>
            )
          }
          {
            url && (
              <Link
                href={url}
                label={`Live link to project "${name}"`}
                targetBlank
                class="aspect-square content-center rounded-md p-2 text-lg font-semibold text-foreground/80 transition-colors hover:bg-accent hover:text-accent-foreground"
                withTooltip
                tooltipContent="Try it out!"
              >
                <Icon
                  class="size-6"
                  name={"lucide:external-link"}
                />
              </Link>
            )
          }
        </div>
      </div>

      <p class="mt-2 text-pretty text-sm text-foreground md:text-base">
        {headline}
      </p>
    </header>

    <div class="mt-8 flex grow flex-col justify-between space-y-6">
      <slot name="description" />
      <ul class="flex flex-wrap gap-4">
        {
          relatedSkills.map((skill) => (
            <li>
              <SkillBadge
                class="text-xs font-semibold text-foreground/90"
                skill={skill}
                hoverGlow
              />
            </li>
          ))
        }
      </ul>
    </div>
  </div>

  <div
    class="relative -mb-4 max-w-[90%] rounded-xl md:max-w-[80%] xl:col-start-7 xl:col-end-[-1] xl:row-start-1 xl:my-2.5 xl:ml-5 xl:max-w-none xl:content-center"
    data-project-preview
  >
    <Image
      data-project-image
      class="pointer-events-none relative rounded-xl"
      src={preview}
      alt={`Preview of the project "${name}"`}
    />

    <video
      data-project-video
      class="absolute inset-x-0 bottom-0 mx-auto size-[80%] rounded-xl"
      autoplay
      muted
      loop
      poster={video?.poster?.src ?? preview.src}
      disablepictureinpicture
      playsinline
    >
      <source
        src={video.webm.av1}
        type="video/webm"
      />

      <source
        src={video.webm.vp9}
        type="video/webm"
      />

      <source
        src={video.mp4.av1}
        type="video/mp4"
      />

      <source
        src={video.mp4.h265}
        type="video/mp4"
      />

      <source
        src={video.mp4.h264}
        type="video/mp4"
      />
    </video>
  </div>
</article>

<style>
  h3::after {
    content: " | ";
    color: theme("colors.muted.DEFAULT");
  }

  [data-project-image],
  [data-project-preview]::after {
    animation: preview linear both;
    animation-timeline: view(calc(10% + var(--header-height)));
  }

  :global([data-github-link] path) {
    transition: fill 0.15s ease-out;
    fill: theme("colors.primary.DEFAULT");
  }

  :global([data-github-link]:hover path) {
    fill: theme("colors.primary.foreground");
  }

  [data-project-video] {
    opacity: 0;
    z-index: 10;

    animation: preview-video linear both;
    animation-timeline: view(calc(10% + var(--header-height)));
  }

  [data-project-preview]::after {
    --from-opacity: 0;

    content: "";
    inset: 0;
    position: absolute;
    display: block;

    width: calc(100% + 10px);
    height: 100%;
    bottom: 0;

    background-image: linear-gradient(
      to bottom,
      transparent 10%,
      theme("colors.background / 50%") 25%,
      theme("colors.background") 95%
    );

    opacity: 0;
  }

  @keyframes preview {
    entry 50% {
      opacity: var(--from-opacity, 1);
      transform: none;
    }
    contain 20% {
      opacity: 0.8;
      transform: perspective(250px) rotateX(10deg) translateY(-5%) translateZ(0);
    }

    contain 90% {
      opacity: 0.8;
      transform: perspective(250px) rotateX(10deg) translateY(-5%) translateZ(0);
    }

    exit 50% {
      opacity: 1;
      transform: none;
    }
  }

  @keyframes preview-video {
    entry 50% {
      opacity: 0;
      transform: none;
    }
    contain 20% {
      opacity: 1;
      transform: translateY(calc(-10% - 5px));
    }

    contain 90% {
      opacity: 1;
      transform: translateY(calc(-10% - 5px));
    }

    exit 50% {
      opacity: 0;
      transform: none;
    }
  }
</style>
