diff --git a/dist/loaders/loadLocalCollection.d.ts b/dist/loaders/loadLocalCollection.d.ts
index 23e3cf51c0ef2c66550fc639d41e20ba9978d3e6..ef4c6f73dd7e9fb17228476b31803e5313810b95 100644
--- a/dist/loaders/loadLocalCollection.d.ts
+++ b/dist/loaders/loadLocalCollection.d.ts
@@ -1,3 +1,4 @@
-import type { IconCollection } from "../../typings/integration";
+import { type IconSet } from "@iconify/tools";
 import type { SVGOOptions } from "../../typings/iconify";
-export default function createLocalCollection(dir: string, options?: SVGOOptions): Promise<IconCollection>;
+import type { ImportDirectoryKeywordCallback } from "@iconify/tools/lib/import/directory";
+export default function createLocalCollection(dir: string, options?: SVGOOptions, customKeyword?: ImportDirectoryKeywordCallback): Promise<IconSet>;
diff --git a/dist/loaders/loadLocalCollection.js b/dist/loaders/loadLocalCollection.js
index 2d8e1d4f32ea05b73080eb1f483ad2dc14dbd488..9c3e3a2f7db5724bb708c38ae1965cf5ce32f295 100644
--- a/dist/loaders/loadLocalCollection.js
+++ b/dist/loaders/loadLocalCollection.js
@@ -1,12 +1,12 @@
 import { cleanupSVG, importDirectory, isEmptyColor, parseColors, runSVGO, } from "@iconify/tools";
-export default async function createLocalCollection(dir, options = { plugins: ["preset-default"] }) {
+export default async function createLocalCollection(dir, options = { plugins: ["preset-default"] }, customKeyword) {
     // Import icons
     const local = await importDirectory(dir, {
         prefix: "local",
         keepTitles: true,
         includeSubDirs: true,
         ignoreImportErrors: "warn",
-        keyword: (file) => file.subdir + file.file,
+        keyword: (customKeyword ?? ((file) => file.subdir + file.file)),
     });
     // Validate, clean up, fix palette and optimize
     await local.forEach(async (name, type) => {
@@ -41,7 +41,7 @@ export default async function createLocalCollection(dir, options = { plugins: ["
         // Update icon
         local.fromSVG(name, svg);
     });
-    return local.export(true);
+    return local;
 }
 async function convertToCurrentColor(svg) {
     await parseColors(svg, {
diff --git a/dist/vite-plugin-astro-icon.d.ts b/dist/vite-plugin-astro-icon.d.ts
index 55d0a05a252ef4da24b4c91df20213927007b255..9313c54cae6d9c6e88fb8b43da80288f4dd0bc44 100644
--- a/dist/vite-plugin-astro-icon.d.ts
+++ b/dist/vite-plugin-astro-icon.d.ts
@@ -4,5 +4,5 @@ import type { IntegrationOptions } from "../typings/integration";
 interface PluginContext extends Pick<AstroConfig, "root" | "output"> {
     logger: AstroIntegrationLogger;
 }
-export declare function createPlugin({ include, iconDir, svgoOptions }: IntegrationOptions, ctx: PluginContext): Plugin;
+export declare function createPlugin({ include, iconSource, svgoOptions }: IntegrationOptions, ctx: PluginContext): Plugin;
 export {};
diff --git a/dist/vite-plugin-astro-icon.js b/dist/vite-plugin-astro-icon.js
index 360dab99004c92d6d05e222509abecafd9577a6f..de36df0d1bbe83feb9386e8514d4934d853ea194 100644
--- a/dist/vite-plugin-astro-icon.js
+++ b/dist/vite-plugin-astro-icon.js
@@ -2,8 +2,9 @@ import { mkdir, readFile, writeFile } from "node:fs/promises";
 import loadLocalCollection from "./loaders/loadLocalCollection.js";
 import loadIconifyCollections from "./loaders/loadIconifyCollections.js";
 import { createHash } from "node:crypto";
-let collections;
-export function createPlugin({ include = {}, iconDir = "src/icons", svgoOptions }, ctx) {
+import { mergeIconSets } from "@iconify/tools";
+export function createPlugin({ include = {}, iconSource = "src/icons", svgoOptions }, ctx) {
+    let collections;
     const { root } = ctx;
     const virtualModuleId = "virtual:astro-icon";
     const resolvedVirtualModuleId = "\0" + virtualModuleId;
@@ -20,28 +21,51 @@ export function createPlugin({ include = {}, iconDir = "src/icons", svgoOptions
                     collections = await loadIconifyCollections({ root, include });
                 }
                 try {
+                    let localSet;
+                    if (Array.isArray(iconSource)) {
+                        const locals = await Promise.all(iconSource.map(async ({ path, keyword }) => {
+                            return await loadLocalCollection(path, svgoOptions, keyword);
+                        }));
+                        if (locals.length === 0) {
+                            return;
+                        }
+                        localSet = locals[0];
+                        for (let i = 1; i < locals.length; i++) {
+                            localSet = mergeIconSets(localSet, locals[i]);
+                        }
+                    }
+                    else {
+                        localSet = await loadLocalCollection(iconSource, svgoOptions);
+                    }
+                    // We need to re run minification because otherwise some icons can be rendered incorrectly.
                     // Attempt to create local collection
-                    const local = await loadLocalCollection(iconDir, svgoOptions);
-                    collections["local"] = local;
+                    collections["local"] = localSet.export(true);
                 }
                 catch (ex) {
                     // Failed to load the local collection
                 }
-                logCollections(collections, { ...ctx, iconDir });
+                logCollections(collections, { ...ctx, iconSource });
                 await generateIconTypeDefinitions(Object.values(collections), root);
                 return `export default ${JSON.stringify(collections)};\nexport const config = ${JSON.stringify({ include })}`;
             }
         },
     };
 }
-function logCollections(collections, { logger, iconDir }) {
+function logCollections(collections, { logger, iconSource }) {
     if (Object.keys(collections).length === 0) {
         logger.warn("No icons detected!");
         return;
     }
     const names = Object.keys(collections).filter((v) => v !== "local");
     if (collections["local"]) {
-        names.unshift(iconDir);
+        if (Array.isArray(iconSource)) {
+            for (const { path } of iconSource) {
+                names.unshift(path);
+            }
+        }
+        else if (typeof iconSource === "string") {
+            names.unshift(iconSource);
+        }
     }
     logger.info(`Loaded icons from ${names.join(", ")}`);
 }
diff --git a/typings/iconify.d.ts b/typings/iconify.d.ts
index 98103d261af3acaaf61378d141ac9eaf81c4974a..e48e99ec0d4b4c97e3b028a81cac9687bd6703fa 100644
--- a/typings/iconify.d.ts
+++ b/typings/iconify.d.ts
@@ -1,6 +1,7 @@
-import type { runSVGO } from "@iconify/tools";
+import type { runSVGO, importDirectory } from "@iconify/tools";
 
 export type SVGOOptions = Omit<Parameters<typeof runSVGO>[1], "keepShapes">;
+export type ImportDirectoryKeywordCallback = Parameters<typeof importDirectory>[1]["keyword"];
 
 export type { IconifyJSON } from "@iconify/types";
 export type { SVG } from "@iconify/tools";
diff --git a/typings/integration.d.ts b/typings/integration.d.ts
index 161c82d7343e9aff315ed6e1fd84ecc5e589419a..c1fb63ae525c75be24015291d56c1ab24d3eb1b1 100644
--- a/typings/integration.d.ts
+++ b/typings/integration.d.ts
@@ -1,11 +1,16 @@
-import type { IconifyJSON, SVGOOptions } from "./iconify";
+import type { IconifyJSON, SVGOOptions, ImportDirectoryKeywordCallback } from "./iconify";
+
+export type IconSource = string | {
+  path: string;
+  keyword?: ImportDirectoryKeywordCallback;
+}[]
 
 export type IntegrationOptions = {
   include?: Record<string, ["*"] | string[]>;
   /**
    * @default "src/icons"
    */
-  iconDir?: string;
+  iconSource?: IconSource;
   /**
    * @default { plugins: ['preset-default'] }
    */
